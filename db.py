import asyncpg
import pandas as pd
import os
from dotenv import load_dotenv
import logging
from typing import Dict, Any, Optional
from datetime import datetime # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ datetime –¥–ª—è created_at

# üõ†Ô∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è db.py
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

load_dotenv()

DB_HOST = "aws-0-eu-north-1.pooler.supabase.com"
DB_NAME = "postgres"
DB_USER = "postgres.frxhghhoqlfuatrfldvb"
DB_PASSWORD = os.getenv("DB_PASSWORD")
DB_PORT = 6543

# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –ø—É–ª—É –∑'—î–¥–Ω–∞–Ω—å
_pool = None

async def get_db_pool():
    """–ü–æ–≤–µ—Ä—Ç–∞—î —ñ—Å–Ω—É—é—á–∏–π –ø—É–ª –∑'—î–¥–Ω–∞–Ω—å –∞–±–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –π–æ–≥–æ."""
    global _pool
    if _pool is None:
        await init_db_pool()
    return _pool

async def init_db_pool():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –ø—É–ª –∑'—î–¥–Ω–∞–Ω—å asyncpg."""
    global _pool
    if _pool is None:
        try:
            _pool = await asyncpg.create_pool(
                host=DB_HOST,
                database=DB_NAME,
                user=DB_USER,
                password=DB_PASSWORD,
                port=DB_PORT,
                min_size=1,  # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑'—î–¥–Ω–∞–Ω—å —É –ø—É–ª—ñ
                max_size=10, # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑'—î–¥–Ω–∞–Ω—å —É –ø—É–ª—ñ
            )
            logger.info("–ü—É–ª –∑'—î–¥–Ω–∞–Ω—å –ë–î —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ.")
            await init_tables() # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è/–æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å –ø—ñ—Å–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ø—É–ª—É
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ø—É–ª—É –∑'—î–¥–Ω–∞–Ω—å –ë–î: {e}")
            _pool = None # –ó–∞–±–µ–∑–ø–µ—á–∏—Ç–∏, —â–æ –ø—É–ª –Ω–µ –±—É–¥–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π, —è–∫—â–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞

async def init_tables():
    """–°—Ç–≤–æ—Ä—é—î/–æ–Ω–æ–≤–ª—é—î —Ç–∞–±–ª–∏—Ü—ñ, —è–∫—â–æ –≤–æ–Ω–∏ –Ω–µ —ñ—Å–Ω—É—é—Ç—å, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ asyncpg."""
    if _pool is None:
        logger.error("–ü—É–ª –∑'—î–¥–Ω–∞–Ω—å –ë–î –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –ù–µ–º–æ–∂–ª–∏–≤–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏/–æ–Ω–æ–≤–ª—é–≤–∞—Ç–∏ —Ç–∞–±–ª–∏—Ü—ñ.")
        return

    async with _pool.acquire() as conn:
        try:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–µ–∫—ñ–ª—å–∫–æ—Ö —Ç–∞–±–ª–∏—Ü—å –∞—Ç–æ–º–∞—Ä–Ω–æ
            async with conn.transaction():
                # –¢–∞–±–ª–∏—Ü—è orders
                await conn.execute("""
                    CREATE TABLE IF NOT EXISTS orders (
                        order_id TEXT PRIMARY KEY,
                        client_id BIGINT,
                        status TEXT,
                        price NUMERIC(10, 2) NULL,
                        description TEXT NULL,
                        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
                    );
                """)
                
                # –î–æ–¥–∞—î–º–æ –∫–æ–ª–æ–Ω–∫–∏ price, description, created_at, —è–∫—â–æ —ó—Ö —â–µ –Ω–µ–º–∞—î
                await conn.execute("""
                    DO $$ BEGIN
                        ALTER TABLE orders ADD COLUMN IF NOT EXISTS price NUMERIC(10, 2) NULL;
                        ALTER TABLE orders ADD COLUMN IF NOT EXISTS description TEXT NULL;
                        ALTER TABLE orders ADD COLUMN IF NOT EXISTS created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW();
                    END $$;
                """)

                # –¢–∞–±–ª–∏—Ü—è client_states
                await conn.execute("""
                    CREATE TABLE IF NOT EXISTS client_states (
                        client_id BIGINT PRIMARY KEY,
                        is_active BOOLEAN DEFAULT FALSE,
                        is_notified BOOLEAN DEFAULT FALSE,
                        current_manager_id BIGINT NULL,
                        last_activity TIMESTAMP WITH TIME ZONE DEFAULT NOW()
                    );
                """)
                # –¢–∞–±–ª–∏—Ü—è client_messages
                await conn.execute("""
                    CREATE TABLE IF NOT EXISTS client_messages (
                        message_id SERIAL PRIMARY KEY,
                        client_id BIGINT NOT NULL,
                        sender_type TEXT NOT NULL,
                        message_text TEXT NOT NULL,
                        timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        FOREIGN KEY (client_id) REFERENCES client_states(client_id) ON DELETE CASCADE
                    );
                """)
                # –¢–∞–±–ª–∏—Ü—è manager_active_dialogs
                await conn.execute("""
                    CREATE TABLE IF NOT EXISTS manager_active_dialogs (
                        manager_id BIGINT PRIMARY KEY,
                        active_client_id BIGINT NULL,
                        FOREIGN KEY (active_client_id) REFERENCES client_states(client_id) ON DELETE SET NULL
                    );
                """)

                # üî• –ù–û–í–ê –¢–ê–ë–õ–ò–¶–Ø: bonus_accounts (–¥–ª—è –±–∞–ª–∞–Ω—Å—É –±–æ–Ω—É—Å—ñ–≤ –∫–ª—ñ—î–Ω—Ç—ñ–≤)
                await conn.execute("""
                    CREATE TABLE IF NOT EXISTS bonus_accounts (
                        telegram_user_id BIGINT PRIMARY KEY,
                        instagram_user_id TEXT UNIQUE,
                        bonus_balance NUMERIC(10, 2) DEFAULT 0.00 NOT NULL,
                        last_updated TIMESTAMP WITH TIME ZONE DEFAULT NOW()
                    );
                """)

                # üî• –û–ù–û–í–õ–ï–ù–ù–Ø –Ü–°–ù–£–Æ–ß–û–á –¢–ê–ë–õ–ò–¶–Ü: bonus_codes
                # –î–æ–¥–∞—î–º–æ –ª–∏—à–µ –∫–æ–ª–æ–Ω–∫—É activated_by_tg_user_id,
                # –æ—Å–∫—ñ–ª—å–∫–∏ —ñ–Ω—à—ñ –≤–∂–µ —ñ—Å–Ω—É—é—Ç—å –ø—ñ–¥ —ñ–Ω—à–∏–º–∏ –Ω–∞–∑–≤–∞–º–∏ (bonus_amount, user_id, redeemed_at).
                await conn.execute("""
                    DO $$ BEGIN
                        ALTER TABLE bonus_codes ADD COLUMN IF NOT EXISTS activated_by_tg_user_id BIGINT;
                    END $$;
                """)
                logger.info("–¢–∞–±–ª–∏—Ü—ñ —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ/–ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω—ñ.")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ/–ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —Ç–∞–±–ª–∏—Ü—å –ë–î: {e}")

async def add_order(order_id: str, client_id: int, status: str, price: Optional[float] = None, description: Optional[str] = None):
    """–î–æ–¥–∞—î –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–æ —Ç–∞–±–ª–∏—Ü—ñ 'orders' –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é asyncpg."""
    pool = await get_db_pool()
    if pool is None:
        logger.warning("–ü—É–ª –∑'—î–¥–Ω–∞–Ω—å –ë–î –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –ù–µ–º–æ–∂–ª–∏–≤–æ –¥–æ–¥–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")
        return
    async with pool.acquire() as conn:
        try:
            await conn.execute("""
                INSERT INTO orders (order_id, client_id, status, price, description, created_at)
                VALUES ($1, $2, $3, $4, $5, NOW())
                ON CONFLICT (order_id) DO NOTHING
            """, order_id, client_id, status, price, description)
            logger.info(f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_id} –¥–æ–¥–∞–Ω–æ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '{status}'.")
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥—ñ–π—Å–Ω–æ –¥–æ–¥–∞–ª–æ—Å—è
            check_record = await conn.fetchrow("SELECT order_id, status FROM orders WHERE order_id = $1", order_id)
            if check_record:
                logger.info(f"–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è {check_record['order_id']} –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '{check_record['status']}'.")
            else:
                logger.warning(f"–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_id} –ù–ï –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î –ø—ñ—Å–ª—è —Å–ø—Ä–æ–±–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è.")

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_id}: {e}")

async def get_order_details(order_id: str) -> Optional[Dict[str, Any]]:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –¥–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (—Å—Ç–∞—Ç—É—Å, —Ü—ñ–Ω—É, –æ–ø–∏—Å) –∑–∞ –π–æ–≥–æ order_id, –∞–±–æ None, —è–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."""
    pool = await get_db_pool()
    if pool is None:
        logger.warning("–ü—É–ª –∑'—î–¥–Ω–∞–Ω—å –ë–î –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –ù–µ–º–æ–∂–ª–∏–≤–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")
        return None
    async with pool.acquire() as conn:
        try:
            record = await conn.fetchrow("SELECT order_id, status, price, description, created_at FROM orders WHERE order_id = $1", order_id)
            return dict(record) if record else None
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–µ—Ç–∞–ª–µ–π –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_id}: {e}")
            return None

async def update_order_status(order_id: str, new_status: str):
    """–û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ –π–æ–≥–æ order_id."""
    pool = await get_db_pool()
    if pool is None:
        logger.warning("–ü—É–ª –∑'—î–¥–Ω–∞–Ω—å –ë–î –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –ù–µ–º–æ–∂–ª–∏–≤–æ –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")
        return
    async with pool.acquire() as conn:
        try:
            await conn.execute("UPDATE orders SET status = $1 WHERE order_id = $2", new_status, order_id)
            logger.info(f"–°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_id} –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {new_status}.")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_id}: {e}")

async def get_client_id_by_order_id(order_id: str) -> Optional[int]: # –ó–ú–Ü–ù–ê –ù–ê–ó–í–ò –§–£–ù–ö–¶–Ü–á
    """
    –û—Ç—Ä–∏–º—É—î client_id –∑ —Ç–∞–±–ª–∏—Ü—ñ 'orders' –∑–∞ 'order_id'.
    –ü–æ–≤–µ—Ä—Ç–∞—î client_id –∞–±–æ None, —è–∫—â–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.
    """
    pool = await get_db_pool()
    if pool is None:
        logger.warning("–ü—É–ª –∑'—î–¥–Ω–∞–Ω—å –ë–î –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –ù–µ–º–æ–∂–ª–∏–≤–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ client_id –∑–∞ order_id.")
        return None
    async with pool.acquire() as conn:
        try:
            client_id = await conn.fetchval(
                "SELECT client_id FROM orders WHERE order_id = $1",
                order_id
            )
            return client_id
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ client_id –∑–∞ order_id {order_id}: {e}")
            return None

async def get_all_orders():
    """–ü–æ–≤–µ—Ä—Ç–∞—î –≤—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è."""
    pool = await get_db_pool()
    if pool is None:
        logger.warning("–ü—É–ª –∑'—î–¥–Ω–∞–Ω—å –ë–î –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –ù–µ–º–æ–∂–ª–∏–≤–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")
        return []
    async with pool.acquire() as conn:
        try:
            records = await conn.fetch("SELECT order_id, client_id, status, price, description, created_at FROM orders")
            return [dict(r) for r in records]
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≤—Å—ñ—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å: {e}")
            return []

async def get_orders_by_status(status: str):
    """–ü–æ–≤–µ—Ä—Ç–∞—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ –ø–µ–≤–Ω–∏–º —Å—Ç–∞—Ç—É—Å–æ–º."""
    pool = await get_db_pool()
    if pool is None:
        logger.warning("–ü—É–ª –∑'—î–¥–Ω–∞–Ω—å –ë–î –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –ù–µ–º–æ–∂–ª–∏–≤–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º.")
        return []
    async with pool.acquire() as conn:
        try:
            records = await conn.fetch("SELECT order_id, client_id, status, price, description, created_at FROM orders WHERE status = $1", status)
            return [dict(r) for r in records]
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω—å –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º '{status}': {e}")
            return []

async def delete_order(order_id: str): # –ó–ú–Ü–ù–ê –ü–ê–†–ê–ú–ï–¢–†–ê
    """–í–∏–¥–∞–ª—è—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ –π–æ–≥–æ order_id."""
    pool = await get_db_pool()
    if pool is None:
        logger.warning("–ü—É–ª –∑'—î–¥–Ω–∞–Ω—å –ë–î –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")
        return
    async with pool.acquire() as conn:
        try:
            await conn.execute("DELETE FROM orders WHERE order_id = $1", order_id)
            logger.info(f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_id} –≤–∏–¥–∞–ª–µ–Ω–æ.")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_id}: {e}")

async def add_client_state(client_id: int, is_active: bool = False, is_notified: bool = False, current_manager_id: Optional[int] = None):
    """–î–æ–¥–∞—î –Ω–æ–≤–∏–π —Å—Ç–∞–Ω –∫–ª—ñ—î–Ω—Ç–∞ –∞–±–æ –æ–Ω–æ–≤–ª—é—î —ñ—Å–Ω—É—é—á–∏–π."""
    pool = await get_db_pool()
    if pool is None:
        logger.warning("–ü—É–ª –∑'—î–¥–Ω–∞–Ω—å –ë–î –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –ù–µ–º–æ–∂–ª–∏–≤–æ –¥–æ–¥–∞—Ç–∏/–æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞–Ω –∫–ª—ñ—î–Ω—Ç–∞.")
        return
    async with pool.acquire() as conn:
        try:
            await conn.execute("""
                INSERT INTO client_states (client_id, is_active, is_notified, current_manager_id, last_activity)
                VALUES ($1, $2, $3, $4, NOW())
                ON CONFLICT (client_id) DO UPDATE SET
                    is_active = EXCLUDED.is_active,
                    is_notified = EXCLUDED.is_notified,
                    current_manager_id = EXCLUDED.current_manager_id,
                    last_activity = NOW()
            """, client_id, is_active, is_notified, current_manager_id)
            logger.info(f"–°—Ç–∞–Ω –∫–ª—ñ—î–Ω—Ç–∞ {client_id} –¥–æ–¥–∞–Ω–æ/–æ–Ω–æ–≤–ª–µ–Ω–æ.")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ/–æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞–Ω—É –∫–ª—ñ—î–Ω—Ç–∞ {client_id}: {e}")

async def get_client_state(client_id: int):
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Å—Ç–∞–Ω –∫–ª—ñ—î–Ω—Ç–∞ –∑–∞ –π–æ–≥–æ client_id, –∞–±–æ None, —è–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."""
    pool = await get_db_pool()
    if pool is None:
        logger.warning("–ü—É–ª –∑'—î–¥–Ω–∞–Ω—å –ë–î –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –ù–µ–º–æ–∂–ª–∏–≤–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞–Ω –∫–ª—ñ—î–Ω—Ç–∞.")
        return None
    async with pool.acquire() as conn:
        try:
            record = await conn.fetchrow("SELECT is_active, is_notified, current_manager_id, last_activity FROM client_states WHERE client_id = $1", client_id)
            return dict(record) if record else None
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞–Ω—É –∫–ª—ñ—î–Ω—Ç–∞ {client_id}: {e}")
            return None

async def update_client_active_status(client_id: int, is_active: bool):
    """–û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫–ª—ñ—î–Ω—Ç–∞."""
    pool = await get_db_pool()
    if pool is None:
        logger.warning("–ü—É–ª –∑'—î–¥–Ω–∞–Ω—å –ë–î –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –ù–µ–º–æ–∂–ª–∏–≤–æ –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫–ª—ñ—î–Ω—Ç–∞.")
        return
    async with pool.acquire() as conn:
        try:
            await conn.execute("UPDATE client_states SET is_active = $1, last_activity = NOW() WHERE client_id = $2", is_active, client_id)
            logger.info(f"–°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫–ª—ñ—î–Ω—Ç–∞ {client_id} –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {is_active}.")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫–ª—ñ—î–Ω—Ç–∞ {client_id}: {e}")

async def update_client_notified_status(client_id: int, is_notified: bool):
    """–û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞."""
    pool = await get_db_pool()
    if pool is None:
        logger.warning("–ü—É–ª –∑'—î–¥–Ω–∞–Ω—å –ë–î –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –ù–µ–º–æ–∂–ª–∏–≤–æ –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞.")
        return
    async with pool.acquire() as conn:
        try:
            await conn.execute("UPDATE client_states SET is_notified = $1 WHERE client_id = $2", is_notified, client_id)
            logger.info(f"–°—Ç–∞—Ç—É—Å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ {client_id} –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {is_notified}.")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ {client_id}: {e}")

async def update_client_manager(client_id: int, manager_id: Optional[int]):
    """–û–Ω–æ–≤–ª—é—î ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞, —è–∫–∏–π –∑–∞—Ä–∞–∑ –ø—Ä–∞—Ü—é—î –∑ –∫–ª—ñ—î–Ω—Ç–æ–º."""
    pool = await get_db_pool()
    if pool is None:
        logger.warning("–ü—É–ª –∑'—î–¥–Ω–∞–Ω—å –ë–î –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –ù–µ–º–æ–∂–ª–∏–≤–æ –æ–Ω–æ–≤–∏—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞.")
        return
    async with pool.acquire() as conn:
        try:
            await conn.execute("UPDATE client_states SET current_manager_id = $1 WHERE client_id = $2", manager_id, client_id)
            logger.info(f"–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞ {client_id} –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {manager_id}.")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞ {client_id}: {e}")

async def get_manager_active_dialogs(manager_id: int) -> Optional[int]:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î client_id, –∑ —è–∫–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä manager_id –∑–∞—Ä–∞–∑ –≤–µ–¥–µ –∞–∫—Ç–∏–≤–Ω–∏–π –¥—ñ–∞–ª–æ–≥.
    –Ø–∫—â–æ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É, –ø–æ–≤–µ—Ä—Ç–∞—î None.
    –¶—è —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ–ø–µ—Ä –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –Ω–æ–≤—É —Ç–∞–±–ª–∏—Ü—é `manager_active_dialogs`.
    """
    pool = await get_db_pool()
    if pool is None:
        logger.warning("–ü—É–ª –∑'—î–¥–Ω–∞–Ω—å –ë–î –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –ù–µ–º–æ–∂–ª–∏–≤–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω–∏–π –¥—ñ–∞–ª–æ–≥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.")
        return None
    async with pool.acquire() as conn:
        try:
            active_client_id = await conn.fetchval(
                "SELECT active_client_id FROM manager_active_dialogs WHERE manager_id = $1",
                manager_id
            )
            return active_client_id
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ {manager_id}: {e}")
            return None

async def update_manager_active_dialog(manager_id: int, client_id: Optional[int]):
    """
    –í—Å—Ç–∞–Ω–æ–≤–ª—é—î –∞–±–æ –æ—á–∏—â–∞—î –∞–∫—Ç–∏–≤–Ω–∏–π –¥—ñ–∞–ª–æ–≥ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞.
    –Ø–∫—â–æ client_id —î None, —Ü–µ –æ–∑–Ω–∞—á–∞—î, —â–æ –º–µ–Ω–µ–¥–∂–µ—Ä –±—ñ–ª—å—à–µ –Ω–µ –≤–µ–¥–µ –∞–∫—Ç–∏–≤–Ω–∏–π –¥—ñ–∞–ª–æ–≥.
    –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –æ–Ω–æ–≤–ª—é—î –∑–∞–ø–∏—Å —É —Ç–∞–±–ª–∏—Ü—ñ `manager_active_dialogs`.
    """
    pool = await get_db_pool()
    if pool is None:
        logger.warning("–ü—É–ª –∑'—î–¥–Ω–∞–Ω—å –ë–î –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –ù–µ–º–æ–∂–ª–∏–≤–æ –æ–Ω–æ–≤–∏—Ç–∏ –∞–∫—Ç–∏–≤–Ω–∏–π –¥—ñ–∞–ª–æ–≥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.")
        return
    async with pool.acquire() as conn:
        try:
            await conn.execute("""
                INSERT INTO manager_active_dialogs (manager_id, active_client_id)
                VALUES ($1, $2)
                ON CONFLICT (manager_id) DO UPDATE SET
                    active_client_id = EXCLUDED.active_client_id
            """, manager_id, client_id)
            if client_id:
                logger.info(f"–ú–µ–Ω–µ–¥–∂–µ—Ä {manager_id} —Ç–µ–ø–µ—Ä –≤–µ–¥–µ –∞–∫—Ç–∏–≤–Ω–∏–π –¥—ñ–∞–ª–æ–≥ –∑ –∫–ª—ñ—î–Ω—Ç–æ–º {client_id}.")
            else:
                logger.info(f"–ê–∫—Ç–∏–≤–Ω–∏–π –¥—ñ–∞–ª–æ–≥ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ {manager_id} –æ—á–∏—â–µ–Ω–æ.")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ {manager_id}: {e}")

async def get_active_clients():
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ ID –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤."""
    pool = await get_db_pool()
    if pool is None:
        logger.warning("–ü—É–ª –∑'—î–¥–Ω–∞–Ω—å –ë–î –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –ù–µ–º–æ–∂–ª–∏–≤–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤.")
        return []
    async with pool.acquire() as conn:
        try:
            records = await conn.fetch("SELECT client_id FROM client_states WHERE is_active = TRUE")
            return [r['client_id'] for r in records]
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤: {e}")
            return []

async def get_pending_clients() -> list[Dict[str, Any]]:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤, —è–∫—ñ –∞–∫—Ç–∏–≤–Ω—ñ, –∞–ª–µ —â–µ –Ω–µ –≤–∑—è—Ç—ñ –≤ —Ä–æ–±–æ—Ç—É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.
    –í–∫–ª—é—á–∞—î client_id —Ç–∞ last_activity.
    """
    pool = await get_db_pool()
    if pool is None:
        logger.warning("–ü—É–ª –∑'—î–¥–Ω–∞–Ω—å –ë–î –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –ù–µ–º–æ–∂–ª–∏–≤–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –æ—á—ñ–∫—É—é—á–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤.")
        return []
    async with pool.acquire() as conn:
        try:
            records = await conn.fetch("""
                SELECT client_id, last_activity
                FROM client_states
                WHERE is_active = TRUE AND current_manager_id IS NULL
                ORDER BY last_activity ASC;
            """)
            return [dict(r) for r in records]
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –æ—á—ñ–∫—É—é—á–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤: {e}")
            return []

async def get_not_notified_clients():
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ ID –∫–ª—ñ—î–Ω—Ç—ñ–≤, —è–∫—ñ –Ω–µ –±—É–ª–∏ —Å–ø–æ–≤—ñ—â–µ–Ω—ñ."""
    pool = await get_db_pool()
    if pool is None:
        logger.warning("–ü—É–ª –∑'—î–¥–Ω–∞–Ω—å –ë–î –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –ù–µ–º–æ–∂–ª–∏–≤–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–µ—Å–ø–æ–≤—ñ—â–µ–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤.")
        return []
    async with pool.acquire() as conn:
        try:
            records = await conn.fetch("SELECT client_id FROM client_states WHERE is_notified = FALSE")
            return [r['client_id'] for r in records]
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –Ω–µ—Å–ø–æ–≤—ñ—â–µ–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤: {e}")
            return []

async def add_client_message(client_id: int, sender_type: str, message_text: str):
    """–î–æ–¥–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞ –∞–±–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó."""
    pool = await get_db_pool()
    if pool is None:
        logger.warning("–ü—É–ª –∑'—î–¥–Ω–∞–Ω—å –ë–î –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –ù–µ–º–æ–∂–ª–∏–≤–æ –¥–æ–¥–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
        return
    async with pool.acquire() as conn:
        try:
            await conn.execute("""
                INSERT INTO client_messages (client_id, sender_type, message_text)
                VALUES ($1, $2, $3)
            """, client_id, sender_type, message_text)
            logger.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞ {client_id} –¥–æ–¥–∞–Ω–æ.")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞ {client_id}: {e}")

async def get_client_messages(client_id: int):
    """–ü–æ–≤–µ—Ä—Ç–∞—î –≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø–µ–≤–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞."""
    pool = await get_db_pool()
    if pool is None:
        logger.warning("–ü—É–ª –∑'—î–¥–Ω–∞–Ω—å –ë–î –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –ù–µ–º–æ–∂–ª–∏–≤–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞.")
        return []
    async with pool.acquire() as conn:
        try:
            records = await conn.fetch("SELECT sender_type, message_text, timestamp FROM client_messages WHERE client_id = $1 ORDER BY timestamp ASC", client_id)
            return [dict(r) for r in records]
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞ {client_id}: {e}")
            return []

async def export_orders_to_excel():
    """–ï–∫—Å–ø–æ—Ä—Ç—É—î –≤—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ Excel —Ñ–∞–π–ª."""
    pool = await get_db_pool()
    if pool is None:
        logger.warning("–ü—É–ª –∑'—î–¥–Ω–∞–Ω—å –ë–î –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –ù–µ–º–æ–∂–ª–∏–≤–æ –µ–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏.")
        return None
    async with pool.acquire() as conn:
        try:
            records = await conn.fetch("SELECT order_id, client_id, status, price, description, created_at FROM orders")
            
            data = [dict(r) for r in records]
            
            if not data:
                logger.info("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É.")
                return None

            df = pd.DataFrame(data)
            file_path = "orders_export.xlsx"
            df.to_excel(file_path, index=False)
            logger.info(f"–î–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω—å –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –¥–æ {file_path}.")
            return file_path
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç—ñ –∑–∞–º–æ–≤–ª–µ–Ω—å –≤ Excel: {e}")
            return None

async def close_db_pool():
    """–ó–∞–∫—Ä–∏–≤–∞—î –ø—É–ª –∑'—î–¥–Ω–∞–Ω—å asyncpg."""
    global _pool
    if _pool:
        await _pool.close()
        _pool = None
        logger.info("–ü—É–ª –∑'—î–¥–Ω–∞–Ω—å –ë–î –∑–∞–∫—Ä–∏—Ç–æ.")

# üî• –ù–û–í–Ü –§–£–ù–ö–¶–Ü–á –î–õ–Ø –û–ë–†–û–ë–ö–ò –ë–û–ù–£–°–Ü–í üî•

async def create_or_get_bonus_account(telegram_user_id: int, instagram_user_id: Optional[str] = None) -> Optional[Dict[str, Any]]:
    """–°—Ç–≤–æ—Ä—é—î –∞–±–æ –ø–æ–≤–µ—Ä—Ç–∞—î –∑–∞–ø–∏—Å –ø—Ä–æ –±–æ–Ω—É—Å–Ω–∏–π –∞–∫–∞—É–Ω—Ç –∫–ª—ñ—î–Ω—Ç–∞."""
    pool = await get_db_pool()
    if pool is None:
        logger.warning("–ü—É–ª –∑'—î–¥–Ω–∞–Ω—å –ë–î –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –ù–µ–º–æ–∂–ª–∏–≤–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏/–æ—Ç—Ä–∏–º–∞—Ç–∏ –±–æ–Ω—É—Å–Ω–∏–π –∞–∫–∞—É–Ω—Ç.")
        return None
    async with pool.acquire() as conn:
        try:
            # –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ—Å–Ω—É—é—á–∏–π –∞–∫–∞—É–Ω—Ç
            record = await conn.fetchrow(
                "SELECT telegram_user_id, instagram_user_id, bonus_balance FROM bonus_accounts WHERE telegram_user_id = $1;",
                telegram_user_id
            )
            if record:
                # –Ø–∫—â–æ –∞–∫–∞—É–Ω—Ç –∑–Ω–∞–π–¥–µ–Ω–æ, –º–æ–∂–ª–∏–≤–æ, –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–Ω–æ–≤–∏—Ç–∏ instagram_user_id, —è–∫—â–æ –≤—ñ–Ω –∑–º—ñ–Ω–∏–≤—Å—è
                if instagram_user_id and record['instagram_user_id'] is None:
                    await conn.execute(
                        "UPDATE bonus_accounts SET instagram_user_id = $2, last_updated = NOW() WHERE telegram_user_id = $1;",
                        telegram_user_id, instagram_user_id
                    )
                    record = await conn.fetchrow( # –û–Ω–æ–≤–ª—é—î–º–æ record –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
                        "SELECT telegram_user_id, instagram_user_id, bonus_balance FROM bonus_accounts WHERE telegram_user_id = $1;",
                        telegram_user_id
                    )
                return dict(record)
            else:
                # –Ø–∫—â–æ –∞–∫–∞—É–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π
                await conn.execute(
                    """
                    INSERT INTO bonus_accounts (telegram_user_id, instagram_user_id, bonus_balance, last_updated)
                    VALUES ($1, $2, $3, NOW());
                    """,
                    telegram_user_id, instagram_user_id, 0.00 # –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –±–∞–ª–∞–Ω—Å 0
                )
                logger.info(f"–°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π –±–æ–Ω—É—Å–Ω–∏–π –∞–∫–∞—É–Ω—Ç –¥–ª—è TG ID: {telegram_user_id}")
                # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —â–æ–π–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –∑–∞–ø–∏—Å
                return {"telegram_user_id": telegram_user_id, "instagram_user_id": instagram_user_id, "bonus_balance": 0.00}
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ/–æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –±–æ–Ω—É—Å–Ω–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É –¥–ª—è TG ID {telegram_user_id}: {e}")
            return None

async def update_bonus_balance(telegram_user_id: int, amount: float) -> bool:
    """–û–Ω–æ–≤–ª—é—î –±–∞–ª–∞–Ω—Å –±–æ–Ω—É—Å—ñ–≤ –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞."""
    pool = await get_db_pool()
    if pool is None:
        logger.warning("–ü—É–ª –∑'—î–¥–Ω–∞–Ω—å –ë–î –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –ù–µ–º–æ–∂–ª–∏–≤–æ –æ–Ω–æ–≤–∏—Ç–∏ –±–∞–ª–∞–Ω—Å –±–æ–Ω—É—Å—ñ–≤.")
        return False
    async with pool.acquire() as conn:
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –±–æ–Ω—É—Å–Ω–∏–π –∞–∫–∞—É–Ω—Ç, —ñ–Ω–∞–∫—à–µ —Å—Ç–≤–æ—Ä—é—î–º–æ –π–æ–≥–æ –∑ 0
            await create_or_get_bonus_account(telegram_user_id)
            
            await conn.execute(
                "UPDATE bonus_accounts SET bonus_balance = bonus_balance + $2, last_updated = NOW() WHERE telegram_user_id = $1;",
                telegram_user_id, amount
            )
            logger.info(f"–û–Ω–æ–≤–ª–µ–Ω–æ –±–∞–ª–∞–Ω—Å –±–æ–Ω—É—Å—ñ–≤ –¥–ª—è TG ID: {telegram_user_id} –Ω–∞ {amount}.")
            return True
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –±–∞–ª–∞–Ω—Å—É –±–æ–Ω—É—Å—ñ–≤ –¥–ª—è TG ID {telegram_user_id}: {e}")
            return False

async def get_bonus_code_details(code: str) -> Optional[Dict[str, Any]]:
    """–û—Ç—Ä–∏–º—É—î –¥–µ—Ç–∞–ª—ñ –±–æ–Ω—É—Å–Ω–æ–≥–æ –∫–æ–¥—É –∑–∞ –π–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è–º."""
    pool = await get_db_pool()
    if pool is None:
        logger.warning("–ü—É–ª –∑'—î–¥–Ω–∞–Ω—å –ë–î –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –ù–µ–º–æ–∂–ª–∏–≤–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ –±–æ–Ω—É—Å–Ω–æ–≥–æ –∫–æ–¥—É.")
        return None
    async with pool.acquire() as conn:
        try:
            # –í–∏–±–∏—Ä–∞—î–º–æ –∫–æ–ª–æ–Ω–∫–∏ –∑–≥—ñ–¥–Ω–æ –∑ –≤–∞—à–æ—é —Ñ–∞–∫—Ç–∏—á–Ω–æ—é —Å—Ö–µ–º–æ—é
            record = await conn.fetchrow(
                "SELECT id, code, is_active, bonus_amount, user_id, redeemed_at, activated_by_tg_user_id FROM bonus_codes WHERE code = $1 LIMIT 1;",
                code
            )
            # –ü–µ—Ä–µ–π–º–µ–Ω–æ–≤—É—î–º–æ –∫–ª—é—á—ñ —Å–ª–æ–≤–Ω–∏–∫–∞, —â–æ–± –≤–æ–Ω–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª–∏ –æ—á—ñ–∫—É–≤–∞–Ω–∏–º –Ω–∞–∑–≤–∞–º —É main.py
            if record:
                details = dict(record)
                details['value'] = details.pop('bonus_amount') # –ü–µ—Ä–µ–π–º–µ–Ω–æ–≤—É—î–º–æ bonus_amount –Ω–∞ value
                details['assigned_to_ig_user_id'] = details.pop('user_id') # –ü–µ—Ä–µ–π–º–µ–Ω–æ–≤—É—î–º–æ user_id –Ω–∞ assigned_to_ig_user_id
                details['activation_date'] = details.pop('redeemed_at') # –ü–µ—Ä–µ–π–º–µ–Ω–æ–≤—É—î–º–æ redeemed_at –Ω–∞ activation_date
                return details
            return None
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–µ—Ç–∞–ª–µ–π –±–æ–Ω—É—Å–Ω–æ–≥–æ –∫–æ–¥—É '{code}': {e}")
            return None

async def activate_bonus_code(code_id: str, telegram_user_id: int) -> bool:
    """
    –ê–∫—Ç–∏–≤—É—î –±–æ–Ω—É—Å–Ω–∏–π –∫–æ–¥, –ø–æ–∑–Ω–∞—á–∞—é—á–∏ –π–æ–≥–æ —è–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏–π
    —Ç–∞ –∑–∞–ø–∏—Å—É—é—á–∏, —Ö—Ç–æ –π–æ–≥–æ –∞–∫—Ç–∏–≤—É–≤–∞–≤.
    """
    pool = await get_db_pool()
    if pool is None:
        logger.warning("–ü—É–ª –∑'—î–¥–Ω–∞–Ω—å –ë–î –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –ù–µ–º–æ–∂–ª–∏–≤–æ –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –±–æ–Ω—É—Å–Ω–∏–π –∫–æ–¥.")
        return False
    async with pool.acquire() as conn:
        try:
            await conn.execute(
                """
                UPDATE bonus_codes
                SET is_active = FALSE, activated_by_tg_user_id = $2, redeemed_at = NOW()
                WHERE id = $1 AND is_active = TRUE;
                """,
                code_id, telegram_user_id
            )
            logger.info(f"–ë–æ–Ω—É—Å–Ω–∏–π –∫–æ–¥ ID {code_id} –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º TG ID {telegram_user_id}.")
            return True
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –±–æ–Ω—É—Å–Ω–æ–≥–æ –∫–æ–¥—É ID {code_id} –¥–ª—è TG ID {telegram_user_id}: {e}")
            return False

async def get_telegram_id_by_instagram_id(instagram_user_id: str) -> Optional[int]:
    """–ü–æ–≤–µ—Ä—Ç–∞—î Telegram ID, –ø–æ–≤'—è–∑–∞–Ω–∏–π –∑ –¥–∞–Ω–∏–º Instagram ID."""
    pool = await get_db_pool()
    if pool is None:
        logger.warning("–ü—É–ª –∑'—î–¥–Ω–∞–Ω—å –ë–î –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –ù–µ–º–æ–∂–ª–∏–≤–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ TG ID –∑–∞ IG ID.")
        return None
    async with pool.acquire() as conn:
        try:
            record = await conn.fetchrow(
                "SELECT telegram_user_id FROM bonus_accounts WHERE instagram_user_id = $1 LIMIT 1;",
                instagram_user_id
            )
            return record["telegram_user_id"] if record else None
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ TG ID –¥–ª—è IG ID {instagram_user_id}: {e}")
            return None

async def link_instagram_to_telegram_account(telegram_user_id: int, instagram_user_id: str) -> bool:
    """–ó–≤'—è–∑—É—î Instagram ID –∑ —ñ—Å–Ω—É—é—á–∏–º Telegram-–∞–∫–∞—É–Ω—Ç–æ–º."""
    pool = await get_db_pool()
    if pool is None:
        logger.warning("–ü—É–ª –∑'—î–¥–Ω–∞–Ω—å –ë–î –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –ù–µ–º–æ–∂–ª–∏–≤–æ –∑–≤'—è–∑–∞—Ç–∏ –∞–∫–∞—É–Ω—Ç–∏.")
        return False
    async with pool.acquire() as conn:
        try:
            # –ü–µ—Ä–µ–∫–æ–Ω–∞—î–º–æ—Å—å, —â–æ –±–æ–Ω—É—Å–Ω–∏–π –∞–∫–∞—É–Ω—Ç –¥–ª—è TG ID —ñ—Å–Ω—É—î
            await create_or_get_bonus_account(telegram_user_id) 

            await conn.execute(
                """
                UPDATE bonus_accounts
                SET instagram_user_id = $2, last_updated = NOW()
                WHERE telegram_user_id = $1;
                """,
                telegram_user_id, instagram_user_id
            )
            logger.info(f"–ó–≤'—è–∑–∞–Ω–æ IG ID {instagram_user_id} –∑ TG ID {telegram_user_id}.")
            return True
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤'—è–∑—É–≤–∞–Ω–Ω—ñ IG ID {instagram_user_id} –∑ TG ID {telegram_user_id}: {e}")
            return False

# üî• –ù–û–í–Ü –§–£–ù–ö–¶–Ü–á –î–õ–Ø –û–¢–†–ò–ú–ê–ù–ù–Ø –°–ü–ò–°–ö–Ü–í –ó–ê–ú–û–í–õ–ï–ù–¨ üî•

async def get_client_orders(client_id: int) -> list[Dict[str, Any]]:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –≤—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ø–µ–≤–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞, –≤–∫–ª—é—á–∞—é—á–∏ —Ü—ñ–Ω—É —Ç–∞ –æ–ø–∏—Å.
    """
    pool = await get_db_pool()
    if pool is None:
        logger.warning("–ü—É–ª –∑'—î–¥–Ω–∞–Ω—å –ë–î –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –ù–µ–º–æ–∂–ª–∏–≤–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞.")
        return []
    async with pool.acquire() as conn:
        try:
            records = await conn.fetch("""
                SELECT order_id, status, created_at, price, description
                FROM orders
                WHERE client_id = $1
                ORDER BY created_at DESC;
            """, client_id)
            return [dict(r) for r in records]
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω—å –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞ {client_id}: {e}")
            return []

async def get_all_active_orders() -> list[Dict[str, Any]]:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –≤—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, —Å—Ç–∞—Ç—É—Å —è–∫–∏—Ö –ù–ï "‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ",
    –≤–∫–ª—é—á–∞—é—á–∏ order_id, client_id, status, price, description.
    """
    pool = await get_db_pool()
    if pool is None:
        logger.warning("–ü—É–ª –∑'—î–¥–Ω–∞–Ω—å –ë–î –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –ù–µ–º–æ–∂–ª–∏–≤–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")
        return []
    async with pool.acquire() as conn:
        try:
            records = await conn.fetch("""
                SELECT order_id, client_id, status, price, description, created_at
                FROM orders
                WHERE status != '‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ'
                ORDER BY created_at DESC;
            """)
            logger.info(f"get_all_active_orders: –ó–Ω–∞–π–¥–µ–Ω–æ {len(records)} –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å.")
            for r in records:
                logger.info(f"–ê–∫—Ç–∏–≤–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ID={r['order_id']}, Status='{r['status']}'") # –û–Ω–æ–≤–ª–µ–Ω–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
            return [dict(r) for r in records]
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å: {e}")
            return []



